key = "CoV"key = key.upper()keylist = key.split()keynumbers = []for i in range(0, len(key)): #for every character in the key  keychar = key[i]# take the number in the sequence  keytonumber = ord(keychar) - 64 #turn the key into a number, minus 65 to make A=0 etc.  keynumbers.append(keytonumber) #add the number to keynumbers listfor i in range(0, len(key)): #print the new list of KEY TO NUM  print(str(key[i]) + ":" + str(keynumbers[i]) )#put your code here in uppercasecode = "KZVARJYBJPHCGUMCGNYVDEVRCGQGFTUVJTHVPRNQTOYVZTSDUZZRHNQIIFSMVVV\PSQGFDTSHGAWGFZFHJJOQGRJPSDPATNWAGOIFONKFZEYJPSYCPJWHIKBZJCPTGA\QFRJSIKORCYZFWOYONLINVRVAZDIVOKOOVSHRHZFHJTWNGPPVKVUBJVOWNSOQGO\KFAQFVUWCCDKGBZFHJNWZQBHAPVEYDHCPPRHAOMOGVPRGGUNYSMGGOTCIIZTHON\VSIGRJPSVEVNKRZVCOJSBTCPPRVPRHAVVKFRJWXJKVUZJPUVPROJWXMHDGRYQKI\KBOJSNCAZOOIPSm"code = code.upper()codenumbers = []#turning the code into numbersfor i in range(0, len(code) ):#for each letter in the code  codechar = code[i]#make codechar into the single letter  codetonumber = ord(codechar) -64#turn the letter into a number, minus 65  codenumbers.append(codetonumber)#add the number to the codenumbers list#print(codenumbers)print("")solvedlist = [] #empty list for laterstep = 0 #set the step to 1(first letter)for i in range(0, len(code) ):#for every character in the code  if step > (len(key) - 1): #if step is longer than our key, reset to start at the beginning of the key    step = 0 #set to the beginning  newcharnumber = (codenumbers[i] - (keynumbers[step]) +1) #take the key number away, plus 1  if newcharnumber < 0: #if the code is in a minus number, assume the alphabet overlaps    newcharnumber += 26 #add 26 so software doesn't make weird results from alphabet overlap  step += 1 #move to the next letter in the key  solvedlist.append(chr(newcharnumber+64)) #turn the number back into a charsolvedstring = "" #parse the list so it's not so uglyfor i in range(0, len(solvedlist) ):  solvedstring = solvedstring + solvedlist[i]print(solvedstring)    